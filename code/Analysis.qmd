---
title: "BSA_data_analysis"
author: "Karim-Mane, Fatoumata Seck"
format: docx
---

```{r setup, include=FALSE, message=FALSE}
# install {pak}
if (!require("pak")) install.packages("pak")

# install {cleanepi}
if (!require("cleanepi")) pak::pak("epiverse-trace/cleanepi")

# install {rstatix}
if (!require("rstatix")) pak::pak("rstatix")


# load the required libraries
library(cleanepi)
library(readxl)
library(dplyr)
library(magrittr)
library(kableExtra)
library(ggplot2)
library(rstatix)

# set the path to the dataset
path_to_data <- file.path(dirname(getwd()), "data", "base_fs_km.xlsx")

# load the functions in helpers.R
source("code/helpers.R")
```

# The experiment

The experiment consists in testing whether any of the four chosen inhibitors has an impact on the _Anopheles gambiae s.l_ reproduction and its susceptibility to _Plasmodium_.

Every inhibitor was tested across three experiments or replicates denoted as `a`, `b`, and `c`, where one set of mosquitoes was exposed to the inhibitor, while the other was used as control.

added this to test push

## Data cleaning

```{r}
data <- readxl::read_xlsx(path_to_data)
```

There were `r nrow(data)` females used in the study.

Missing values are written as `na`. We will substitute them with `NA` for compliance with R.

```{r}
data <- cleanepi::replace_missing_values(
  data,
  target_columns = NULL,
  na_strings = "na"
)
```

After importing the data from MS excel, some `Date` columns have been transformed into `numeric`. They will be converted back to `Date` in ISO8604 format.
{cleanepi} no longer performs automatic conversion from numeric to Date. We will use the below to perform the conversion.

```{r}
target_columns <- c("date_ponte", "date_first_eclosion",
                    "date_first_nymphose", "date_last_nymphose",
                    "date_first_emergence", "date_last_emergence")
for (col in target_columns) {
  # convert into numeric
  data[[col]] <- suppressWarnings(
    as.numeric(data[[col]])
  )
  # convert into Date
  data[[col]] <- lubridate::as_date(
    data[[col]],
    origin = as.Date("1900-01-01")
  )
}
```

Rename some column names to make them explicit: replace `experience1` by `inhibitor`, and `experience2` by `experience` as these two columns represent the inhibitors and experiments that were performed on the corresponding samples.

```{r}
data <- data %>%
  cleanepi::standardize_column_names(
    rename = c(inhibitor = "experience1", experience = "experience2")
  )
```

Rename the values in the two updated columns from the above.

```{r}
# update values in the `inhibitor` column
data <- data %>%
  dplyr::mutate(inhibitor = dplyr::recode(
    inhibitor,
    exp_inhib1 = 'inhib1',
    exp_inhib3 = 'inhib3',
    exp_inhib4 = 'inhib4',
    exp_inhib10 = 'inhib10'
  ))

# update values in the `experience` column
data <- data %>%
  dplyr::mutate(experience = dplyr::recode(
    experience,
    exp1a = 'exp1',
    exp3a = 'exp1',
    exp4a = 'exp1',
    exp10a = 'exp1',
    exp1b = 'exp2',
    exp3b = 'exp2',
    exp4b = 'exp2',
    exp10b = 'exp2',
    exp1c = 'exp3',
    exp3c = 'exp3',
    exp4c = 'exp3',
    exp10c = 'exp3'
  ))

# update values in the `statut` column
are_test <- data$statut != "ctrl"
data$statut[are_test] <- "test"
```

The following columns are not needed for the downstream analysis. We will drop them.

```{r}
data <- data %>%
  dplyr::select(-c(id, pot, statut2, dose))
```

Moving the `insemination` column to the left to have it as part of the first columns of the dataset. This makes it accessible when viewing the data in the View panel.
We also replace 'yes' and 'no' by 'TRUE' and 'FALE' to have the column in a logical form.

```{r}
data <- data %>%
  dplyr::relocate(insemination, .after = statut) %>%
  dplyr::mutate(insemination = dplyr::recode(
    insemination,
    yes = TRUE,
    no = FALSE
  ))
```

The **insemination** column determines whether a mosquito was inseminated or not. It contains some missing values where the corresponding mosquito was actually inseminated. As it's directly related to the eclosion, we will replace every missing entry by 'TRUE' where the **date_first_eclosion** is not missing

```{r}
# identify fertilized females (with hatched eggs) where the insemination value
# is set to NA
incorrect <- is.na(data$insemination) & !is.na(data$date_first_eclosion)
```

we have `r sum(incorrect)` entry at line `r which(incorrect)` where insemination was set to `NA`, while the females have hatched eggs.

```{r}
# Let's set them to TRUE
if (any(incorrect)) {
  data$insemination[incorrect] <- TRUE
}
```

Some entries has a value in the **date_first_eclosion** column, but their insemination status is set FALSE. We will set it to TRUE to correct for such mistakes.

```{r}
# identify fertilized females (with hatched eggs) where the insemination value
# is set to FALSE
incorrect <- data$insemination == FALSE & !is.na(data$date_first_eclosion)
```

We have `r sum(incorrect)` entries at lines `r which(incorrect)` where the insemination is set to FALSE, while the corresponding females have hatched eggs. 

```{r}
# Let's set them to TRUE
if (any(incorrect)) {
  data$insemination[incorrect] <- TRUE
}
```

## Save the cleaned dataset

After the cleaning steps above, the data is ready for use in analysis workflow. We are saving this version of the cleaned data that we can share with collaborators.

```{r}
writexl::write_xlsx(
  data,
  file.path(dirname(path_to_data), "clean_base_fs_km.xlsx")
)
```

## Data analysis

### Remove all non-inseminated females from the target data

Please specific clearly why you are only interested in inseminated females for downstream analysis.

```{r}
# convert the insemination column into logical
data$insemination <- as.logical(as.factor(data$insemination))

# only keep the inseminated females
# data_for_analysis <- data %>%
#   dplyr::filter(insemination) # same as dplyr::filter(insemination == TRUE)

# We have `r nrow(data_for_analysis)` females which are all inseminated.
```



### Comparing the proportion of inseminated females across the different experiences

::: {.callout-note collapse="true"}
## Definition

Inseminated female here refers to the females that have received spermatozoids (mated).
:::

```{r message=FALSE}
# generate the table with the proportion of inseminated female in the groups
# defined above (by inhibitor, experience, and statut)
table_insemination <- data %>%
  dplyr::group_by(inhibitor, experience, statut) %>%
  dplyr::summarise(
    nbre_femelles = dplyr::n(),
    inseminees = sum(insemination, na.rm = TRUE) # same sum(insemination == TRUE, na.rm = TRUE)
  ) %>% 
  dplyr::mutate(prop_inseminees = (inseminees / nbre_femelles) * 100)

# convert to factor and re-level to maintain the order we need
table_insemination$inhibitor <- factor(
  table_insemination$inhibitor,
  levels = c("inhib1", "inhib3", "inhib4", "inhib10")
)
```

Below we are graphically visualising the table with the proportion of inseminated females per group of inhibitor, experience, and statut.

```{r}
plot_prop_inseminated <- ggplot(
  table_insemination, aes(x = experience, y = prop_inseminees, fill = statut)) + 
  geom_bar(position = 'dodge', stat = 'identity') +
  facet_wrap( ~ inhibitor, ncol = 2) +
  theme_bw()

plot_prop_inseminated
```


### Test for the difference in the proportion of inseminated females between the diffent groups

The documentation about two-proportions tests can be found [here](https://www.sthda.com/english/wiki/two-proportions-z-test-in-r)

Please state clearly why you are doing this comparison

```{r}
prop_test_res <- fisher_exact_test_res <- NULL
for (inhib in unique(table_insemination$inhibitor)) {
  for (exp in unique(table_insemination$experience)) {
    # store the inhibitor and experience information in a data frame
    res <- data.frame(inhibitor = inhib, experience = exp)
    
    # subset the table to only have the data for the experience and inhibitor of
    # interest
    tmp_data <- table_insemination %>%
      dplyr::filter(inhibitor == inhib & experience == exp)
    
    # perform the test
    test_result <- compare_proportions(
      test_data = tmp_data,
      group_col = "statut",
      count_col = "nbre_femelles",
      observed_col = "inseminees"
    )
    
    # combine the data
    res <- cbind(res, test_result)
    if (is.null(attr(test_result, "test"))) {
      prop_test_res <- rbind(prop_test_res, res)
    } else {
      fisher_exact_test_res <- rbind(fisher_exact_test_res, res)
    }
  }
}
```

* TODO:
    * document the `compare_proportions()` function
    * rename some columns in `prop_test_res` to reflect what the variables stand for
    * find a way of combining `prop_test_res` and `fisher_exact_test_res`
    



Say Fatima does all her edits.....
