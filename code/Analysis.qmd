---
title: "BSA_data_analysis"
author: "Karim-Mane, Fatoumata Seck"
format: docx
---

```{r setup, include=FALSE, message=FALSE}
# install cleanepi from a specific branch
if (!require("cleanepi")) {
  remotes::install_github("epiverse-trace/cleanepi")
}

# load the required libraries
library(cleanepi)
library(readxl)
library(dplyr)
library(magrittr)
library(kableExtra)
library(ggplot2)
library(binom)

# set the path to the dataset
path_to_data <- "/Users/karimmane/Documents/Karim/Personnel/Fatima_Moussa/Fatima/BSA_analysis/Data/base_fs_km.xlsx"
```

# The experiment

The experiment consists in testing whether any of the four chosen inhibitors has an impact on the _Anopheles gambiae s.l_ reproduction and its susceptibility to _Plasmodium_.

Every inhibitor was tested across three experiments or replicates denoted as `a`, `b`, and `c`, where one set of mosquitoes was exposed to the inhibitor, while the other was used as control.

## Data cleaning

```{r}
data <- readxl::read_xlsx(path_to_data)
```

There were `r nrow(data)` females used in the study.

Missing values are written as `na`. We will substitute them with `NA` for compliance with R.

```{r}
data <- cleanepi::replace_missing_values(
  data,
  target_columns = NULL,
  na_strings = "na"
)
```

After importing the data from MS excel, some `Date` columns have been transformed into `numeric`. They will be converted back to `Date` in ISO8604 format.
{cleanepi} no longer performs automatic conversion from numeric to Date. We will use the below to perform the conversion.

```{r}
target_columns <- c("date_ponte", "date_first_eclosion",
                    "date_first_nymphose", "date_last_nymphose",
                    "date_first_emergence", "date_last_emergence")
for (col in target_columns) {
  # convert into numeric
  data[[col]] <- suppressWarnings(
    as.numeric(data[[col]])
  )
  # convert into Date
  data[[col]] <- lubridate::as_date(
    data[[col]],
    origin = as.Date("1900-01-01")
  )
}
```

Rename some column names to make them explicit: replace `experience1` by `inhibitor`, and `experience2` by `experience` as these two columns represent the inhibitors and experiments that were performed on the corresponding samples.

```{r}
data <- data %>%
  cleanepi::standardize_column_names(
    rename = c(inhibitor = "experience1", experience = "experience2")
  )
```

Rename the values in the two updated columns from the above.

```{r}
# update values in the `inhibitor` column
data <- data %>%
  dplyr::mutate(inhibitor = dplyr::recode(
    inhibitor,
    exp_inhib1 = 'inhib1',
    exp_inhib3 = 'inhib3',
    exp_inhib4 = 'inhib4',
    exp_inhib10 = 'inhib10'
  ))

# update values in the `experience` column
data <- data %>%
  dplyr::mutate(experience = dplyr::recode(
    experience,
    exp1a = 'exp1',
    exp3a = 'exp1',
    exp4a = 'exp1',
    exp10a = 'exp1',
    exp1b = 'exp2',
    exp3b = 'exp2',
    exp4b = 'exp2',
    exp10b = 'exp2',
    exp1c = 'exp3',
    exp3c = 'exp3',
    exp4c = 'exp3',
    exp10c = 'exp3'
  ))

# update values in the `statut` column
are_test <- data$statut != "ctrl"
data$statut[are_test] <- "test"
```

The following columns are not needed for the downstream analysis. We will drop them.

```{r}
data <- data %>%
  dplyr::select(-c(id, pot, statut2, dose))
```

Moving the `insemination` column to the left to have it as part of the first columns of the dataset. This makes it accessible when viewing the data in the View panel.
We also replace 'yes' and 'no' by 'TRUE' and 'FALE' to have the column in a logical form.

```{r}
data <- data %>%
  dplyr::relocate(insemination, .after = statut) %>%
  dplyr::mutate(insemination = dplyr::recode(
    insemination,
    yes = TRUE,
    no = FALSE
  ))
```

The **insemination** column determines whether a mosquito was inseminated or not. It contains some missing values where the corresponding mosquito was actually inseminated. As it's directly related to the eclosion, we will replace every missing entry by 'TRUE' where the **date_first_eclosion** is not missing

```{r}
# identify fertilized females (with hatched eggs) where the insemination value is set to NA
incorrect <- is.na(data$insemination) & !is.na(data$date_first_eclosion)
```

we have `r sum(incorrect)` entry at line `r which(incorrect)` where insemination was set to `NA`, while the females have hatched eggs.

```{r}
# Let's set them to TRUE
if (any(incorrect)) {
  data$insemination[incorrect] <- TRUE
}
```

Some entries has a value in the **date_first_eclosion** column, but their insemination status is set FALSE. We will set it to TRUE to correct for such mistakes.

```{r}
#identify fertilized females (with hatched eggs) where the insemination value is set to FALSE
incorrect <- data$insemination == FALSE & !is.na(data$date_first_eclosion)
```

We have `r sum(incorrect)` entries at lines `r which(incorrect)` where the insemination is set to FALSE, while the corresponding females have hatched eggs. 

```{r}
# Let's set them to TRUE
if (any(incorrect)) {
  data$insemination[incorrect] <- TRUE
}
```

## Save the cleaned dataset

After the cleaning steps above, the data is ready for use in analysis workflow. We are saving this version of the cleaned data that we can share with collaborators.

```{r}
writexl::write_xlsx(
  data,
  file.path(dirname(path_to_data), "clean_base_fs_km.xlsx")
)
```

## Data analysis

### Remove all non-inseminated females from the target data

Please specific clearly why you are only interested in inseminated females for downstream analysis.

```{r}
# convert the insemination column into logical
data$insemination <- as.logical(as.factor(data$insemination))

# only keep the inseminated females
# data_for_analysis <- data %>%
#   dplyr::filter(insemination) # same as dplyr::filter(insemination == TRUE)

# We have `r nrow(data_for_analysis)` females which are all inseminated.
```



### Distribution of the proportion of inseminated females across the different experiences

::: {.callout-note collapse="true"}
## Definition

Inseminated here means that the females have received spermatozoids (mated).
:::

```{r}
# generate the table with the proportion of inseminated female in the groups defines above (by inhibitor, experience, and statut)
table_insemination <- data %>%
  dplyr::group_by(inhibitor, experience, statut) %>%
  dplyr::summarise(
    nbre_femelles = dplyr::n(),
    inseminees = sum(insemination, na.rm = TRUE) # same sum(insemination == TRUE, na.rm = TRUE)
  ) %>% 
  dplyr::mutate(prop_inseminees = (inseminees / nbre_femelles) * 100)

# convert to factor and re-level to maintain the order we need
table_insemination$inhibitor <- factor(
  table_insemination$inhibitor,
  levels = c("inhib1", "inhib3", "inhib4", "inhib10")
)
```

Below we are graphically visualising the table with the proportion of inseminated females per group of inhibitor, experience, and statut.

```{r}
plot_prop_inseminated <- ggplot(
  table_insemination, aes(x = experience, y = prop_inseminees, fill = statut)) + 
  geom_bar(position = 'dodge', stat = 'identity') +
  facet_wrap( ~ inhibitor, ncol = 2) +
  theme_bw()

plot_prop_inseminated
```


### Test for the difference in proportions of inseminated females in the diffent groups ?

Please state clearly why you are doing this comparison

```{r}
#SIGNIFICANCE OF THE difference between the Proportions of inseminated females
# significant p-value should be less than p<0.05
#inhib 1 exp1 : Ctrl vers Test #using numb of inseminated / numb not_inseminated
mp<-matrix(c(
  table_insemination$inseminees[1],#Ctrl
  (table_insemination$nbre_femelles[1]-table_insemination$inseminees[1]),#Ctrl
  table_insemination$inseminees[2],#Test
  (table_insemination$nbre_femelles[2]-table_insemination$inseminees[2])), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp, alternative = "two.sided") #p-value = 0.7602
```


```{r}
#inhib 1 exp2 : Ctrl vers Test #using N_inseminated et N_not_inseminated
mp<-matrix(c(
  table_insemination$inseminees[3],#Ctrl
  (table_insemination$nbre_femelles[3]-table_insemination$inseminees[3]), #Ctrl
  table_insemination$inseminees[4],#Test
  (table_insemination$nbre_femelles[4]-table_insemination$inseminees[4])), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp) #p-value = 0.9022
```

#SIGNIFICANCE OF THE PROPs difference between Ctrl/Test for each experiment
p-value should be less than p<0.05
#inhib 1 exp1 Ctr/test : #p-value =0.7602 #difference not statiscally signicant
#inhib 1 exp2 Ctr/test : #p-value =0.9022 # no difference
#inhib 1 exp3 Ctr/test : #p-value =0.7591 # no difference

#inhib 10 exp1 Ctr/test : #p-value =0.3318 # no difference
#inhib 10 exp2 Ctr/test : #p-value =0.4048 # no difference
#inhib 10 exp3 Ctr/test : #p-value =1 #almost equal # no difference

#inhib 3 exp1 Ctr/test : #p-value =0.2513 # no difference
#inhib 3 exp2 Ctr/test : #p-value =0.2353 # no difference
#inhib 3 exp3 Ctr/test : #p-value =0.6875 # no difference

#inhib 4 exp1 Ctr/test : #p-value =1 #almost equal # no difference
#inhib 4 exp2 Ctr/test : #p-value =0.471 # no difference
#inhib 4 exp3 Ctr/test : #p-value =0.151# no difference

Given that all the differences are not significant (Prop of inseminated females in the tests statiscally = to Prop of inseminated females in the Ctrl for all experiments) we do not need to go into more details. No need to be plotting the erros bars ( I will use a table including the P.values for the manuscript)


##### R
##### Result1 The inhibitors doesn't have effects in the female insemination rates !!! ####
##### R

###############################################################################

###### Now, for the downstream analysis, we have to remove data where inseminatin != "yes". We are working on the Reproduction and the mandatory params are Blood feeding of the females (all mosquitoes used in this experience are fully fed females) and the Mating (meaning inseminatin should be == "yes").

```{r}
NA_insemination <- data %>% 
  filter(is.na(data$insemination))  #22 females with insemination == "NA"

No_insemination <- data %>% 
  filter(data$insemination == "no") #183 females with insemination == "No"

#Filter data where insemination == "yes" to continue the analysis
data <- data %>% # from here the data will all be with insemination == "yes"
  filter(data$insemination == "yes") #590 rows #Number of females remaining
```
################## Number of remaining females after filtering ############
##Summarizing the number of females per experience for each inhibitor both as table and graphically after the filtering to have an ideas of what is remaining.

```{r}
numb_females <- data %>%
  dplyr::group_by(inhibitor, experience, statut) %>%
  dplyr::summarise(N = dplyr::n())

# convert to factor and re-level to maintain the order we need
numb_females$inhibitor <- factor(
  numb_females$inhibitor,
  levels = c("inhib1", "inhib3", "inhib4", "inhib10")
)

numb_females %>%
  knitr::kable()
```
```{r}
#Plot Number of females after filtering of not inseminated ones
plot_numb_females <- ggplot(numb_females, aes(x = experience, y = N, fill = statut)) + 
  geom_bar(position = 'dodge', stat = 'identity') +
  facet_wrap( ~ inhibitor, ncol = 2) +
  theme_bw()
plot_numb_females
```

## Number of females ayant pondus
#####################Number of females ayant pondus #################

```{r}
Table_ponte <- data %>%
  dplyr::group_by(inhibitor, experience, statut) %>%
  dplyr::summarise(
    nbre_femelles = dplyr::n(),
    ayant_pondues = sum(!is.na(date_ponte))
  ) %>%
  dplyr::mutate(
    prop_ayant_pondues = (ayant_pondues / nbre_femelles)*100
  )
```
```{r}
# convert to factor and re-level to maintain the order we need
Table_ponte$inhibitor <- factor(
  Table_ponte$inhibitor,
  levels = c("inhib1", "inhib3", "inhib4", "inhib10")
)
``` 
Visualization of the variation in the proportion of egg_led females per experience group for each inhibitor.

```{r}
plot_females_ayant_pondues <- ggplot(Table_ponte, aes(x = experience, y = prop_ayant_pondues, fill = statut)) + 
  geom_bar(position = 'dodge', stat = 'identity') +
  facet_wrap( ~ inhibitor, ncol = 2) +
  theme_bw()
plot_females_ayant_pondues
```

We need to add the error bars to the bar plots.
```{r}
Table_ponte
```
```{r}
#SIGNIFICANCE OF THE difference between the Proportions of egg_led females
# significant p-value should be less than p<0.05
#inhib 1 exp1 : Ctrl vers Test #using nombre ayant_pondu et ayant_pas_pondu
mp<-matrix(c(
  Table_ponte$ayant_pondues[1],#Ctrl
  (Table_ponte$nbre_femelles[1]-Table_ponte$ayant_pondues[1]), #Ctrl
  Table_ponte$ayant_pondues[2],#Test
  (Table_ponte$nbre_femelles[2]-Table_ponte$ayant_pondues[2])), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp) #p-value = 0.03693
```
```{r}
#inhib 1 exp2 : Ctrl vers Test #using nombre ayant_pondu et ayant_pas_pondu
mp<-matrix(c(
  Table_ponte$ayant_pondues[3],#Ctrl
  (Table_ponte$nbre_femelles[3]-Table_ponte$ayant_pondues[3]), #Ctrl
  Table_ponte$ayant_pondues[4],#Test
  (Table_ponte$nbre_femelles[4]-Table_ponte$ayant_pondues[4])), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp) #p-value = 1
```

#SIGNIFICANCE OF THE PROPs difference between Ctrl/Test for each experiment
p-value should be less than p<0.05

#inhib 1 exp1 Ctr/test : #p-value =0.03693 (ctrl>test) #difference statiscally ! signicant !!!
#inhib 1 exp2 Ctr/test : #p-value =1 # no difference
#inhib 1 exp3 Ctr/test : #p-value =0.4573 # no difference

#inhib 10 exp1 Ctr/test : #p-value = 0.5806# no difference
#inhib 10 exp2 Ctr/test : #p-value = 0.3204# no difference
#inhib 10 exp3 Ctr/test : #p-value = 0.3675 # no difference

#inhib 3 exp1 Ctr/test : #p-value = 0.5323 # no difference
#inhib 3 exp2 Ctr/test : #p-value = 0.617 # no difference
#inhib 3 exp3 Ctr/test : #p-value = 0.3396# no difference

#inhib 4 exp1 Ctr/test : #p-value = 0.8397 # no difference
#inhib 4 exp2 Ctr/test : #p-value = 1# no difference
#inhib 4 exp3 Ctr/test : #p-value = 0.5215# no difference

Given that all the differences are not significant (Prop of egg_led females in the tests statiscally = to Prop of egg_led females in the Ctrl for all experiments).
##### R
##### Result2 The inhibitors doesn't have effects in the prop of egg_led femal !!! ####
##### R

###############################################################################

###### Now, for the downstream analysis, we are going to compare the reproductivness of the femelles. We are going to calculate the mean of eggs development among the females that has led eggs so we need to excludes females that didnt led eggs : filter(nbre_oeufs!=0) !!!!!!

```{r}
#Lets exclud female that didn't led eggs (meaning nbre_oeufs == 0)
data <- data %>% # from here the data will all be with insemination == "yes"
  filter(data$nbre_oeufs!=0) #this will select data where nbre_oeufs not = 0
```
#######################################################################

#Nombre moyens d'oeufs pondus par femelle
#####################Nombre moyens d'oeufs pondus #################

```{r}
table_mean_egg_led <- data %>% 
  dplyr::select(inhibitor, experience, statut, nbre_oeufs) %>% 
  #dplyr::filter(nbre_oeufs!=0) %>% 
  dplyr::group_by(inhibitor, experience, statut) %>% 
  dplyr::summarize(Mean_egg=mean(nbre_oeufs),#calculate the mean
            SD=sd(nbre_oeufs)) #calculate the standard error

plot_mean_egg_led <- ggplot(table_mean_egg_led, aes(x = experience, y=Mean_egg, fill=statut)) +
  facet_wrap( ~ inhibitor, ncol = 2) +
  geom_bar(stat="identity", position="dodge", col="black") +
  geom_errorbar(aes(ymin=Mean_egg,
                    ymax=Mean_egg + SD),
                width = 0.3,
                position=position_dodge(0.8)) +
  #geom_text(aes(x=experience, y=prop_ayant_eclos +4, label=errorbar),
  geom_text(aes(x=experience, y=Mean_egg +4, label=""),
            position=position_dodge(1), size=8) +
  labs(x="Experience", y = "Nombre moyens d'oeufs pondus par femelle") +
  theme(text = element_text(size=15)) +
  theme(legend.position ="top") +
  theme(legend.title = element_blank()) +
theme_bw()
plot_mean_egg_led

```

#Compare the mean number of eggs laid by femaeles par experience !!!
I AM TIRED, WAS GIVING A TRY BUT WILL CONTINUE LATER to add the difference in the plot that will label the errobar (DRAFT AFTER THE FELLOWING RUN).
I tried to avoid working outside R. (i.e creating my own data frame on excel 😁).

###### Eclosion des oeufs (oeufs eclos est un proxy du  nbre de larves )    
```{r}
#create the table
table_eclosion <- data %>%
  dplyr::select(inhibitor, experience, statut, nbre_oeufs, nbre_larves) %>%
  dplyr::group_by(inhibitor, experience, statut) %>%
  dplyr::summarise(across(c(nbre_oeufs, nbre_larves), sum))
#level the order of the inhibitors
table_eclosion$inhibitor <- factor(
  table_eclosion$inhibitor, levels = c("inhib1", "inhib3", "inhib4", "inhib10")
  )
#add the columns oeufs eclos, oeufs non eclos , prop_ayant_eclos , prop_non_eclos
table_eclosion$oeufs_eclos <- (table_eclosion$nbre_larves) #oeufs eclos == nbre_larves
table_eclosion$oeufs_non_eclos <- 
  (table_eclosion$nbre_oeufs - table_eclosion$nbre_larves)
table_eclosion$prop_ayant_eclos <- (table_eclosion$nbre_larves/ table_eclosion$`nbre_oeufs`)*100
```
```{r}
#We are working on proportion so we need IC of the proportions
a<-binom::binom.confint(table_eclosion$oeufs_eclos, table_eclosion$nbre_oeufs, conf.level = 0.95, methods = "exact")
a
colnames(a)[2] = "oeufs_eclos"
colnames(a)[3] = "nbre_oeufs"
colnames(a)[4] = "prop_ayant_eclos"
colnames(a)[5] = "IC_Lower"
colnames(a)[6] = "IC_Upper"
a <- a%>% 
  dplyr::select(IC_Lower, IC_Upper) *100
#Let's merge the lower IC and Upper IC to the Table_eclosion
table_eclosion <- cbind(table_eclosion,a)
table_eclosion
```

```{r}
# Plot Taux d'eclosion with error bars !!!
 plot_table_eclosion <- ggplot(table_eclosion, aes(x = experience, y=prop_ayant_eclos, fill=statut)) +
  facet_wrap( ~ inhibitor, ncol = 2) +
  geom_bar(stat="identity", position="dodge", col="black") +
  geom_errorbar(aes(ymin=prop_ayant_eclos,
                    ymax=prop_ayant_eclos + (IC_Upper-prop_ayant_eclos)),
                width = 0.3,
                position=position_dodge(0.8)) +
  #geom_text(aes(x=experience, y=prop_ayant_eclos +4, label=errorbar),
  geom_text(aes(x=experience, y=prop_ayant_eclos +4, label=""),
            position=position_dodge(1), size=8) +
  labs(x="Experience", y = "Taux d'eclosion des oeufs") +
  theme(text = element_text(size=15)) +
  theme(legend.position ="top") +
  theme(legend.title = element_blank()) +
theme_bw()
plot_table_eclosion

```
```{r}
#SIGNIFICANCE OF THE difference of egg hatching rate (taux d'eclosion)
# significant p-value should be less than p<0.05
#inhib 1 exp1 : Ctrl vers Test #using nombre oeufs_ayant_eclos et oeufs_non_eclos
mp<-matrix(c(
  table_eclosion$oeufs_eclos[1], table_eclosion$oeufs_non_eclos[1], #Ctrl
  table_eclosion$oeufs_eclos[2], table_eclosion$oeufs_non_eclos[2]), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp) #p-value < 2.2e-16
```
```{r}
#inhib 1 exp2 : Ctrl vers Test #using nombre ayant_pondu et ayant_pas_pondu
mp<-matrix(c(
  table_eclosion$oeufs_eclos[3], table_eclosion$oeufs_non_eclos[4], #Ctrl
  table_eclosion$oeufs_eclos[4], table_eclosion$oeufs_non_eclos[4]), #Test
           nrow=2, ncol=2, byrow = "TRUE") 
prop.test(mp) #p-value = 0.4215
```

# SIGNIFICANCE OF THE hatching rate difference between Ctrl/Test for each experiment
p-value should be less than p<0.05

#inhib 1 exp1 Ctr/test : #p-value < 2.2e-16 #(test>ctrl) #difference signicant !!!
#inhib 1 exp2 Ctr/test : #p-value = 0.4215 # no difference
#inhib 1 exp3 Ctr/test : #p-value = 1.799e-12 # (ctrl>test) #difference signicant !!!

#inhib 10 exp1 Ctr/test : #p-value = 0.04299# (test>ctrl) #difference signicant !!!
#inhib 10 exp2 Ctr/test : #p-value = 0.06118 #no difference
#inhib 10 exp3 Ctr/test : #p-value = 0.2719 # no difference

#inhib 3 exp1 Ctr/test : #p-value = <2.2e-16 # (test>ctrl) #difference signicant !!!
#inhib 3 exp2 Ctr/test : #p-value =  9.253e-16 #(ctrl>test) #difference signicant !!!
#inhib 3 exp3 Ctr/test : #p-value = 0.0001809 #(ctrl>test) #difference signicant !!!

#inhib 4 exp1 Ctr/test : #p-value =  1.461e-05 #(ctrl>test) #difference signicant !!!
#inhib 4 exp2 Ctr/test : #p-value = 1.8e-12 #(ctrl>test) #difference signicant !!!
#inhib 4 exp3 Ctr/test : #p-value = 0.3818 # no difference

Given that all the differences are not significant (Prop of egg_led females in the tests statiscally = to Prop of egg_led females in the Ctrl for all experiments).
##### R
##### Result4 The inhibitors have some mitigeted effects in the prop of egg hatching !!! ####
##### R

###############################################################################
#Compare the mean number of eggs laid by femaeles par experience !!!
###### Nbre moyens d'oeufs pondus par les femelles ##############
```
Table_mean_egg_led <- data %>% 
  dplyr::select(inhibitor, experience, statut, nbre_oeufs) %>% 
  #dplyr::filter(nbre_oeufs!=0) %>% 
  dplyr::group_by(inhibitor, experience, statut) %>% 
  dplyr::summarize(Mean_egg=mean(nbre_oeufs),#calculate the mean
            SD=sd(nbre_oeufs)) #calculate the standard error
###### Nbre d'oeufs pondus par les femelles ##############
# analysis of variance
anova <- aov(nbre_oeufs ~ statut, data = data)

# Tukey's test
tukey <- TukeyHSD(anova)

# compact letter display
cld <- multcompLetters4(anova, tukey)

# table with factors and 3rd quantile
Table_mean_egg_led <- group_by(data, inhibitor, experience, statut) %>%
  summarise(Mean=mean(nbre_oeufs), SD = sd(nbre_oeufs)) #%>%
  #arrange(desc(Mean))

# extracting the compact letter display and adding to the Tk table
cld <- as.data.frame.list(cld$statut)
Table_mean_egg_led$cld <- cld$Letters

#dt2 <- dt %>%
#drop_na()
print(Table_mean_egg_led)

plot3 <-Table_mean_egg_led%>%
ggplot(aes(x=statut, y=Mean, fill=statut)) +
  geom_bar(stat="identity", position="dodge", col="black", width = 0.5) +
  geom_errorbar(aes(ymin=Mean, ymax=Mean+SD), size=0.4, width=0.1, position=position_dodge(0.9)) +
  labs(x="statut", y="Mean number of laid eggs") +
  geom_text(aes(label = cld, y = Mean + SD + 7), position = position_dodge(0.9)) +
  theme(axis.text.x = element_text(vjust = 0.5, hjust=1))
  theme_few()
  plot3
```

```
#install.packages("jtools")
library(jtools)
bp <- ggplot(Table_mean_egg_led, aes(x=experience, y=Mean_egg, fill=statut) + 
  geom_boxplot(aes(fill=statut)) +
  ggtitle("Average Episode Count - Individual Behaviors") +
  ylab("Average Episode Count") + xlab("Period") +
  theme_apa()
# Split in horizontal direction
bp + stat_compare_means(comparisons = list(c("Ctrl","test")),method = "t.test") + 
    stat_compare_means( aes(label = ..p.signif..), 
                        label.x = 1.5, label.y = 0.75,method = "t.test") +
  theme(legend.position = "none") +
  facet_wrap(. ~ inhibitor,scales='free',ncol=2) 
```

